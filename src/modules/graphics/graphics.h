#include <stdbool.h>

#pragma once

struct WindowFlags;

typedef enum {
  LIMIT_TEXTURE_SIZE_2D,
  LIMIT_TEXTURE_SIZE_3D,
  LIMIT_TEXTURE_SIZE_CUBE,
  LIMIT_TEXTURE_LAYERS,
  LIMIT_RENDER_WIDTH,
  LIMIT_RENDER_HEIGHT,
  LIMIT_RENDER_VIEWS,
  LIMIT_SHADER_GROUPS,
  LIMIT_SHADER_GROUP_ITEMS,
  LIMIT_INPUT_BUFFER_RANGE,
  LIMIT_INPUT_BUFFER_ALIGN,
  LIMIT_COMPUTE_BUFFER_RANGE,
  LIMIT_COMPUTE_BUFFER_ALIGN,
  LIMIT_VERTEX_ATTRIBUTES,
  LIMIT_VERTEX_ATTRIBUTE_OFFSET,
  LIMIT_VERTEX_BUFFERS,
  LIMIT_VERTEX_BUFFER_STRIDE,
  LIMIT_VERTEX_SHADER_OUTPUTS,
  LIMIT_COMPUTE_WIDTH,
  LIMIT_COMPUTE_HEIGHT,
  LIMIT_COMPUTE_DEPTH,
  LIMIT_COMPUTE_GROUP_WIDTH,
  LIMIT_COMPUTE_GROUP_HEIGHT,
  LIMIT_COMPUTE_GROUP_DEPTH,
  LIMIT_COMPUTE_GROUP_VOLUME,
  LIMIT_COMPUTE_SHARED_MEMORY,
  LIMIT_ALLOCATION_SIZE,
  LIMIT_POINT_SIZE,
  LIMIT_ANISOTROPY,
  MAX_LIMITS
} GraphicsLimit;

bool lovrGraphicsInit(bool debug);
void lovrGraphicsDestroy(void);
void lovrGraphicsCreateWindow(struct WindowFlags* flags);
void lovrGraphicsGetLimits(double limits[MAX_LIMITS]);
